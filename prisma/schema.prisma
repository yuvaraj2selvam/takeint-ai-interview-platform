datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String              @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  interviews    Interview[]
  feedBack      InterviewFeedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Interview {
  id              String             @id @default(cuid())
  name            String
  userId          String
  type            String
  techStack       String[]
  role            String
  experience      String
  difficultyLevel String
  noOfQuestions   Int
  createdAt       DateTime           @default(now())
  isCompleted     Boolean?           @default(false)
  questions       String[]
  feedBack        InterviewFeedback?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InterviewFeedback {
  id                  String    @id @default(cuid())
  interviewId         String    @unique
  userId              String    @unique
  feedBack            String
  problemSolving      Int
  systemDesign        Int
  communicationSkills Int
  technicalAccuracy   Int
  behavioralResponses Int
  timeManagement      Int
  createdAt           DateTime  @default(now())
  interview           Interview @relation(fields: [interviewId], references: [id])
  user                User      @relation(fields: [userId], references: [id])
}
